FUN.VALUE = double(nGenes))
EZ_g.mat = t(EZ_g.mat)
return(apply(EZ_g.mat, 2, sum))
}
library(microbenchmark)
microbenchmark(
orig = orig.fun(quad.points.weights, x, geneIds, lowerLim, log_alt_guide_probs, log_null_guide_probs, nMesh, nGenes),
new = integratedExpectation(x,  geneIds, alt_guide_probs, null_guide_probs, quad.points.weights$nodes, lowerLim/quad.points.weights$nodes, quad.points.weights$weights)
)
cppCode <- '
#include <algorithm>
#include <Rcpp.h>
using namespace Rcpp;
// from smithlab_cpp
double logSumLogVec(NumericVector vals) {
const NumericVector::iterator x =
std::max_element(vals.begin(), vals.begin() + vals.size());
const double max_val = *x;
const size_t max_idx = x - vals.begin();
double sum = 1.0;
for (size_t i = 0; i < vals.size(); ++i)
if (i != max_idx)
sum += exp(vals[i] - max_val);
return max_val + log(sum);
}
// [[Rcpp::export]]
NumericVector integratedExpectation(NumericVector x,
NumericVector geneIds,
NumericVector alt_guide_probs,
NumericVector null_guide_probs,
NumericVector q,
NumericVector p,
NumericVector weights){
assert(q.size() == p.size());
assert(q.size() == weights.size());
int nGenes = std::max(geneIds);
NumericVector genePosteriors(nGenes);
for(size_t i = 0; i < q.size(); i++){
NumericVector logPosGeneProbs(nGenes);
NumericVector logNullGeneProbs(nGenes);
for(size_t j = 0; j < logPosGeneProbs.size(); j++){
logPosGeneProbs(j) = p(i);
logNullGeneProbs(j) = (1 - p(i));
}
for(size_t j = 0; j < geneIds.size(); j++){
logPosGeneProbs(geneIds(j)) += log(q(i)*alt_guide_probs(j)
+ (1 - q(i))*null_guide_probs(j));
logNullGeneProbs(geneIds(j)) += log(null_guide_probs(j));
}
for(size_t j = 0; j < genePosteriors.size(); j++){
NumericVector y(2);
y(0) = logPosGeneProbs(j);
y(1) = logNullGeneProbs(j);
double logDenom = logSumLogVec(y);
genePosteriors(j) += weights(i)*exp(logPosGeneProbs(j) - logDenom);
}
}
return genePosteriors;
}
'
fileConn<-file("cppCode.cpp")
writeLines(cppCode, fileConn)
close(fileConn)
sourceCpp("cppCode.cpp")
cppCode <- '
#include <algorithm>
#include <Rcpp.h>
using namespace Rcpp;
// from smithlab_cpp
double logSumLogVec(NumericVector vals) {
const NumericVector::iterator x =
std::max_element(vals.begin(), vals.begin() + vals.size());
const double max_val = *x;
const size_t max_idx = x - vals.begin();
double sum = 1.0;
for (size_t i = 0; i < vals.size(); ++i)
if (i != max_idx)
sum += exp(vals[i] - max_val);
return max_val + log(sum);
}
// [[Rcpp::export]]
NumericVector integratedExpectation(NumericVector x,
NumericVector geneIds,
NumericVector alt_guide_probs,
NumericVector null_guide_probs,
NumericVector q,
NumericVector p,
NumericVector weights){
assert(q.size() == p.size());
assert(q.size() == weights.size());
int nGenes = max(geneIds);
NumericVector genePosteriors(nGenes);
for(size_t i = 0; i < q.size(); i++){
NumericVector logPosGeneProbs(nGenes);
NumericVector logNullGeneProbs(nGenes);
for(size_t j = 0; j < logPosGeneProbs.size(); j++){
logPosGeneProbs(j) = p(i);
logNullGeneProbs(j) = (1 - p(i));
}
for(size_t j = 0; j < geneIds.size(); j++){
logPosGeneProbs(geneIds(j)) += log(q(i)*alt_guide_probs(j)
+ (1 - q(i))*null_guide_probs(j));
logNullGeneProbs(geneIds(j)) += log(null_guide_probs(j));
}
for(size_t j = 0; j < genePosteriors.size(); j++){
NumericVector y(2);
y(0) = logPosGeneProbs(j);
y(1) = logNullGeneProbs(j);
double logDenom = logSumLogVec(y);
genePosteriors(j) += weights(i)*exp(logPosGeneProbs(j) - logDenom);
}
}
return genePosteriors;
}
'
fileConn<-file("cppCode.cpp")
writeLines(cppCode, fileConn)
close(fileConn)
sourceCpp("cppCode.cpp")
microbenchmark(
orig = orig.fun(quad.points.weights, x, geneIds, lowerLim, log_alt_guide_probs, log_null_guide_probs, nMesh, nGenes),
new = integratedExpectation(x,  geneIds, alt_guide_probs, null_guide_probs, quad.points.weights$nodes, lowerLim/quad.points.weights$nodes, quad.points.weights$weights)
)
cppCode <- '
#include <algorithm>
#include <Rcpp.h>
using namespace Rcpp;
// from smithlab_cpp
double logSumLogVec(NumericVector vals) {
const NumericVector::iterator x =
std::max_element(vals.begin(), vals.begin() + vals.size());
const double max_val = *x;
const size_t max_idx = x - vals.begin();
double sum = 1.0;
for (size_t i = 0; i < vals.size(); ++i)
if (i != max_idx)
sum += exp(vals[i] - max_val);
return max_val + log(sum);
}
// [[Rcpp::export]]
NumericVector integratedExpectation(NumericVector x,
NumericVector geneIds,
NumericVector alt_guide_probs,
NumericVector null_guide_probs,
NumericVector q,
NumericVector p,
NumericVector weights){
assert(q.size() == p.size());
assert(q.size() == weights.size());
int nGenes = max(geneIds);
NumericVector genePosteriors(nGenes);
for(size_t i = 0; i < q.size(); i++){
NumericVector logPosGeneProbs(nGenes);
NumericVector logNullGeneProbs(nGenes);
for(size_t j = 0; j < logPosGeneProbs.size(); j++){
logPosGeneProbs(j) = p(i);
logNullGeneProbs(j) = (1 - p(i));
}
for(size_t j = 0; j < geneIds.size(); j++){
logPosGeneProbs(geneIds(j) - 1) += log(q(i)*alt_guide_probs(j)
+ (1 - q(i))*null_guide_probs(j));
logNullGeneProbs(geneIds(j) - 1) += log(null_guide_probs(j));
}
for(size_t j = 0; j < genePosteriors.size(); j++){
NumericVector y(2);
y(0) = logPosGeneProbs(j);
y(1) = logNullGeneProbs(j);
double logDenom = logSumLogVec(y);
genePosteriors(j) += weights(i)*exp(logPosGeneProbs(j) - logDenom);
}
}
return genePosteriors;
}
'
fileConn<-file("cppCode.cpp")
writeLines(cppCode, fileConn)
close(fileConn)
sourceCpp("cppCode.cpp")
microbenchmark(
orig = orig.fun(quad.points.weights, x, geneIds, lowerLim, log_alt_guide_probs, log_null_guide_probs, nMesh, nGenes),
new = integratedExpectation(x,  geneIds, alt_guide_probs, null_guide_probs, quad.points.weights$nodes, lowerLim/quad.points.weights$nodes, quad.points.weights$weights)
)
?edgeR::DGEList
factors = c("Neurog1", "Suz12", "Ascl1", "Ezh2", "Jun", "Esc", "Mef", "Brn2", "Brain", "Cerebellum", "Cortex", "DorsalRootGanglion", "Habenula", "Hippocampus", "Astrocyte", "Microglia", "Neuron", "NFO", "OPC")
design.matrix = model.matrix(~0 + colData$study)
colnames(design.matrix) = c("Liu", "Tsunemoto", "Zhang")
design.matrix = cbind(design.matrix, vapply(factors[1:(length(factors) - 1)], function(f) as.numeric(grepl(toString(f), colData$condition)), FUN.VALUE = numeric(length(colData$condition))))
?edgeR::removeBatchEffect
?cpm
?edgeR::cpm
design.matrix = model.matrix(~0 + colData$study)
colnames(design.matrix) = c("Liu", "Tsunemoto", "Zhang", "Wapinski2013")
design.matrix = cbind(design.matrix, vapply(factors[-"CamEs"], function(f) as.numeric(grepl(toString(f), colData$condition)), FUN.VALUE = numeric(length(colData$condition))))
?edgeR::plotMDS
limma::removeBatchEffect()
?limma::removeBatchEffect
library(sva)
?sva
?num.sv
?sva
?ComBat
?f.pvalue
?match
?colorRampPalette
?geom_col
?ggplot2::geom_col
?plotMDS
?xlab
?plotMDS
?cpm
?limma::cpm
library(edgeR)
?cpm
?estimateDisp
?glmQLFit
?cpm
?p.adjust
colclus = as.dendrogram(hclust(as.dist(1 - cor(x, method = "spearman")), "median"))
rowclus = as.dendrogram(hclust(as.dist(1 - cor(t(x), method = "spearman")), "median"))
heatmap.2(x, Rowv = rowclus, Colv = colclus, dendrogram = "none", col = scaleblueyellow, ColSideColors = ccols, RowSideColors = rcols, density.info = "none", trace = "none", margins = c(12, 10), main = "cell", symm=F,symkey=F,symbreaks = FALSE)
legend("bottomleft", legend = sapply(unique(cellType), toString), col = unique(ccols), border=FALSE, bty="n", y.intersp = 0.7, cex=0.75, pch = 15)
?p.adjust
?ggplot2::scale_fill_continuous
?match
?setdiff
?GenomicRanges::findOverlaps
?apply
pchisq()
?pchisq
?CRISPhieRmix::CRISPhieRmix
Rosenbluh2017CRISPRkoANDi = read.table(file = "~/sgRNA/sgRNA2Groups/data/Rosenbluh2017/Rosenbluh2017CRISPRkoANDi.txt", header = TRUE)
set.seed(123)
Rosenbluh2017CRISPRko = Rosenbluh2017CRISPRkoANDi[which(Rosenbluh2017CRISPRkoANDi$Category %in% c("exon", "control")), c(1:9, 10:11)]
dim(Rosenbluh2017CRISPRko)
hist(rowSums(Rosenbluh2017CRISPRko[,c("DNA_Pool", "HT29_Cas9_pLX311_Rep1", "HT29_Cas9_pLX311_Rep2")]), breaks = 100)
Rosenbluh2017CRISPRko = Rosenbluh2017CRISPRko[-which(rowSums(Rosenbluh2017CRISPRko[,c("DNA_Pool", "HT29_Cas9_pLX311_Rep1", "HT29_Cas9_pLX311_Rep2")]) < 300), ]
dim(Rosenbluh2017CRISPRko)
library(DESeq2)
library(ggplot2)
library(ggjoy)
gene.ids = Rosenbluh2017CRISPRko$Gene
gene.counts = c(table(gene.ids[-which(is.na(gene.ids))]))
library(fitdistrplus)
gene.counts.nb.fit = fitdist(gene.counts, "nbinom")
gene.counts.nb.fit
neg.gene.counts = rnbinom(3*length(gene.counts),
mu = gene.counts.nb.fit$estimate[2],
size = gene.counts.nb.fit$estimate[1])
Rosenbluh2017CRISPRko.negctrl = Rosenbluh2017CRISPRko[which(is.na(Rosenbluh2017CRISPRko$Gene)), ]
n.negctrl = dim(Rosenbluh2017CRISPRko.negctrl)[1]
Rosenbluh2017CRISPRko.neg.sim = c()
for(i in 1:length(neg.gene.counts)){
for(j in 1:neg.gene.counts[i]){
rand.index = sample.int(n.negctrl, 1)
Rosenbluh2017CRISPRko.neg.sim = rbind(Rosenbluh2017CRISPRko.neg.sim,
c("sim", paste0("sim", i), "NA", "sim", "NA", 0, 0, "+",
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$DNA_Pool[rand.index], size = 200),
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$HT29_Cas9_pLX311_Rep1[rand.index], size = 200),
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$HT29_Cas9_pLX311_Rep2[rand.index], size = 200)))
}
}
Rosenbluh2017CRISPRko.sim = data.frame(Cell_line = c(sapply(Rosenbluh2017CRISPRko$Cell_line, toString), Rosenbluh2017CRISPRko.neg.sim[,1]),
Gene = c(sapply(Rosenbluh2017CRISPRko$Gene, toString), Rosenbluh2017CRISPRko.neg.sim[,2]),
Spacer = c(sapply(Rosenbluh2017CRISPRko$Spacer, toString), paste0("sim", 1:length(Rosenbluh2017CRISPRko.neg.sim[,3]))),
Category = c(sapply(Rosenbluh2017CRISPRko$Category, toString), Rosenbluh2017CRISPRko.neg.sim[,4]),
Chr = c(sapply(Rosenbluh2017CRISPRko$Chr, toString), Rosenbluh2017CRISPRko.neg.sim[,5]),
Start = c(Rosenbluh2017CRISPRko$Start, Rosenbluh2017CRISPRko.neg.sim[,6]),
End = c(Rosenbluh2017CRISPRko$End, Rosenbluh2017CRISPRko.neg.sim[,7]),
Strand = c(sapply(Rosenbluh2017CRISPRko$Strand, toString), Rosenbluh2017CRISPRko.neg.sim[,8]),
DNA_Pool = as.numeric(c(Rosenbluh2017CRISPRko$DNA_Pool, Rosenbluh2017CRISPRko.neg.sim[,9])),
HT29_Cas9_pLX311_Rep1 = as.numeric(c(Rosenbluh2017CRISPRko$HT29_Cas9_pLX311_Rep1, Rosenbluh2017CRISPRko.neg.sim[,10])),
HT29_Cas9_pLX311_Rep2 = as.numeric(c(Rosenbluh2017CRISPRko$HT29_Cas9_pLX311_Rep2, Rosenbluh2017CRISPRko.neg.sim[,11])))
Rosenbluh2017CRISPRko.sim = Rosenbluh2017CRISPRko.sim[which(rowSums(Rosenbluh2017CRISPRko.sim[,9:11]) > 300), ]
Rosenbluh2017CRISPRko.sim.counts = Rosenbluh2017CRISPRko.sim[,c(9:11)]
rownames(Rosenbluh2017CRISPRko.sim.counts) = Rosenbluh2017CRISPRko.sim$Spacer
coldata = data.frame(condition = factor(c(0, 1, 1)))
rownames(coldata) = colnames(Rosenbluh2017CRISPRko.sim.counts)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::DESeqDataSetFromMatrix(countData = Rosenbluh2017CRISPRko.sim.counts,
colData = coldata,
design = ~ condition)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::DESeq(Rosenbluh2017CRISPRko.sim.DESeq)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::results(Rosenbluh2017CRISPRko.sim.DESeq)
Rosenbluh2017CRISPRko.sim.DESeq.log2fc = Rosenbluh2017CRISPRko.sim.DESeq$log2FoldChange
Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene = Rosenbluh2017CRISPRko.sim$Gene[which(Rosenbluh2017CRISPRko.sim$Category != "control")]
Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene = factor(Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene, levels = unique(Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene))
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")])
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc)
dim(Rosenbluh2017CRISPRko.sim)
Rosenbluh2017CRISPRkoSimGeneCounts = Rosenbluh2017CRISPRko.sim.counts[which(Rosenbluh2017CRISPRko.sim$Category != "control"), ]
dim(Rosenbluh2017CRISPRkoSimGeneCounts)
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")])
Rosenbluh2017CRISPRkoSim.essential = data.frame(gene = unique(Rosenbluh2017CRISPRko.sim$Gene),
essential = 1 - grepl("sim", unique(Rosenbluh2017CRISPRko.sim$Gene)))
if(sum(Rosenbluh2017CRISPRkoSim.essential$gene == "NA") > 0){
Rosenbluh2017CRISPRkoSim.essential = Rosenbluh2017CRISPRkoSim.essential[-which(Rosenbluh2017CRISPRkoSim.essential$gene == "NA"), ]
}
Rosenbluh2017CRISPRkoSim.essential$gene = factor(Rosenbluh2017CRISPRkoSim.essential$gene, levels = unique(Rosenbluh2017CRISPRkoSim.essential$gene))
Rosenbluh2017CRISPRkoSim = list(log2fc = Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")], geneIds = Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene, negCtrl = Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category == "control")], counts = Rosenbluh2017CRISPRko.sim[ ,c(2:4, 9:11)])
Rosenbluh2017CRISPRkoSim$counts = Rosenbluh2017CRISPRkoSim$counts[c(which(Rosenbluh2017CRISPRkoSim$counts$Category == "exon"), which(Rosenbluh2017CRISPRkoSim$counts$Category == "sim"), which(Rosenbluh2017CRISPRkoSim$counts$Category == "control")), ]
ggplot(data.frame(log2fc = Rosenbluh2017CRISPRko.sim.DESeq.log2fc, essential = factor(Rosenbluh2017CRISPRkoSim.essential$essential[match(Rosenbluh2017CRISPRko.sim$Gene, Rosenbluh2017CRISPRkoSim.essential$gene)])), aes(x = log2fc, col = essential)) + geom_density() + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
gene.counts = table(Rosenbluh2017CRISPRkoSim$geneIds)
gene.counts
write.table(Rosenbluh2017CRISPRkoSim$counts[which(Rosenbluh2017CRISPRkoSim$counts$Category == "control") ,c(2, 1, 4, 5, 6)], file = "~/sgRNA/sgRNA2Groups/data/Rosenbluh2017/Rosenbluh2017CRISPRkoSimNegCtrlCounts.txt", quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")\
WeissmanCRISPRiRicinTreatment = read.table(file = "~/sgRNA/sgRNA2Groups/data/Weissman/WeissmanCRISPRiRicinTreatment.txt", header = TRUE)
head(WeissmanCRISPRiRicinTreatment)
WeissmanCRISPRiRicinTreatmentUntreatedVsDay0Counts = WeissmanCRISPRiRicinTreatment[ ,c("sequence", "gene", "T0JEV", "T0MH", "untreatedJEV", "untreatedMH")]
head(WeissmanCRISPRiRicinTreatmentUntreatedVsDay0Counts)
?pROC::roc
?match
ConstitutiveCoreEssentialGenes = scan("~/sgRNA/sgRNA2Groups/data/Weissman/ConstitutiveCoreEssentialGenes.txt", what = character())
NonEssentialGenes = scan("~/sgRNA/sgRNA2Groups/data/Weissman/NonEssentialGenes.txt", what = character())
EssentialGenes = data.frame(gene = factor(c(sapply(ConstitutiveCoreEssentialGenes, toString), sapply(NonEssentialGenes, toString))), essential = c(rep(1, times = length(ConstitutiveCoreEssentialGenes)), rep(0, times = length(NonEssentialGenes))))
?match
View(WeissmanCRISPRiRicinTreatmentUntreatedVsDay0Counts)
Rosenbluh2017CRISPRkoANDi = read.table(file = "~/sgRNA/sgRNA2Groups/data/Rosenbluh2017/Rosenbluh2017CRISPRkoANDi.txt", header = TRUE)
set.seed(123)
Rosenbluh2017CRISPRko = Rosenbluh2017CRISPRkoANDi[which(Rosenbluh2017CRISPRkoANDi$Category %in% c("exon", "control")), c(1:9, 10:11)]
dim(Rosenbluh2017CRISPRko)
hist(rowSums(Rosenbluh2017CRISPRko[,c("DNA_Pool", "HT29_Cas9_pLX311_Rep1", "HT29_Cas9_pLX311_Rep2")]), breaks = 100)
Rosenbluh2017CRISPRko = Rosenbluh2017CRISPRko[-which(rowSums(Rosenbluh2017CRISPRko[,c("DNA_Pool", "HT29_Cas9_pLX311_Rep1", "HT29_Cas9_pLX311_Rep2")]) < 300), ]
dim(Rosenbluh2017CRISPRko)
library(DESeq2)
library(ggplot2)
library(ggjoy)
gene.ids = Rosenbluh2017CRISPRko$Gene
gene.counts = c(table(gene.ids[-which(is.na(gene.ids))]))
library(fitdistrplus)
gene.counts.nb.fit = fitdist(gene.counts, "nbinom")
gene.counts.nb.fit
neg.gene.counts = rnbinom(3*length(gene.counts),
mu = gene.counts.nb.fit$estimate[2],
size = gene.counts.nb.fit$estimate[1])
Rosenbluh2017CRISPRko.negctrl = Rosenbluh2017CRISPRko[which(is.na(Rosenbluh2017CRISPRko$Gene)), ]
n.negctrl = dim(Rosenbluh2017CRISPRko.negctrl)[1]
Rosenbluh2017CRISPRko.neg.sim = c()
for(i in 1:length(neg.gene.counts)){
for(j in 1:neg.gene.counts[i]){
rand.index = sample.int(n.negctrl, 1)
Rosenbluh2017CRISPRko.neg.sim = rbind(Rosenbluh2017CRISPRko.neg.sim,
c("sim", paste0("sim", i), "NA", "sim", "NA", 0, 0, "+",
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$DNA_Pool[rand.index], size = 200),
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$HT29_Cas9_pLX311_Rep1[rand.index], size = 200),
rnbinom(1, mu = Rosenbluh2017CRISPRko.negctrl$HT29_Cas9_pLX311_Rep2[rand.index], size = 200)))
}
}
Rosenbluh2017CRISPRko.sim = data.frame(Cell_line = c(sapply(Rosenbluh2017CRISPRko$Cell_line, toString), Rosenbluh2017CRISPRko.neg.sim[,1]),
Gene = c(sapply(Rosenbluh2017CRISPRko$Gene, toString), Rosenbluh2017CRISPRko.neg.sim[,2]),
Spacer = c(sapply(Rosenbluh2017CRISPRko$Spacer, toString), paste0("sim", 1:length(Rosenbluh2017CRISPRko.neg.sim[,3]))),
Category = c(sapply(Rosenbluh2017CRISPRko$Category, toString), Rosenbluh2017CRISPRko.neg.sim[,4]),
Chr = c(sapply(Rosenbluh2017CRISPRko$Chr, toString), Rosenbluh2017CRISPRko.neg.sim[,5]),
Start = c(Rosenbluh2017CRISPRko$Start, Rosenbluh2017CRISPRko.neg.sim[,6]),
End = c(Rosenbluh2017CRISPRko$End, Rosenbluh2017CRISPRko.neg.sim[,7]),
Strand = c(sapply(Rosenbluh2017CRISPRko$Strand, toString), Rosenbluh2017CRISPRko.neg.sim[,8]),
DNA_Pool = as.numeric(c(Rosenbluh2017CRISPRko$DNA_Pool, Rosenbluh2017CRISPRko.neg.sim[,9])),
HT29_Cas9_pLX311_Rep1 = as.numeric(c(Rosenbluh2017CRISPRko$HT29_Cas9_pLX311_Rep1, Rosenbluh2017CRISPRko.neg.sim[,10])),
HT29_Cas9_pLX311_Rep2 = as.numeric(c(Rosenbluh2017CRISPRko$HT29_Cas9_pLX311_Rep2, Rosenbluh2017CRISPRko.neg.sim[,11])))
Rosenbluh2017CRISPRko.sim = Rosenbluh2017CRISPRko.sim[which(rowSums(Rosenbluh2017CRISPRko.sim[,9:11]) > 300), ]
Rosenbluh2017CRISPRko.sim.counts = Rosenbluh2017CRISPRko.sim[,c(9:11)]
rownames(Rosenbluh2017CRISPRko.sim.counts) = Rosenbluh2017CRISPRko.sim$Spacer
coldata = data.frame(condition = factor(c(0, 1, 1)))
rownames(coldata) = colnames(Rosenbluh2017CRISPRko.sim.counts)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::DESeqDataSetFromMatrix(countData = Rosenbluh2017CRISPRko.sim.counts,
colData = coldata,
design = ~ condition)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::DESeq(Rosenbluh2017CRISPRko.sim.DESeq)
Rosenbluh2017CRISPRko.sim.DESeq = DESeq2::results(Rosenbluh2017CRISPRko.sim.DESeq)
Rosenbluh2017CRISPRko.sim.DESeq.log2fc = Rosenbluh2017CRISPRko.sim.DESeq$log2FoldChange
Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene = Rosenbluh2017CRISPRko.sim$Gene[which(Rosenbluh2017CRISPRko.sim$Category != "control")]
Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene = factor(Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene, levels = unique(Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene))
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")])
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc)
dim(Rosenbluh2017CRISPRko.sim)
Rosenbluh2017CRISPRkoSimGeneCounts = Rosenbluh2017CRISPRko.sim.counts[which(Rosenbluh2017CRISPRko.sim$Category != "control"), ]
dim(Rosenbluh2017CRISPRkoSimGeneCounts)
length(Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")])
Rosenbluh2017CRISPRkoSim.essential = data.frame(gene = unique(Rosenbluh2017CRISPRko.sim$Gene),
essential = 1 - grepl("sim", unique(Rosenbluh2017CRISPRko.sim$Gene)))
if(sum(Rosenbluh2017CRISPRkoSim.essential$gene == "NA") > 0){
Rosenbluh2017CRISPRkoSim.essential = Rosenbluh2017CRISPRkoSim.essential[-which(Rosenbluh2017CRISPRkoSim.essential$gene == "NA"), ]
}
Rosenbluh2017CRISPRkoSim.essential$gene = factor(Rosenbluh2017CRISPRkoSim.essential$gene, levels = unique(Rosenbluh2017CRISPRkoSim.essential$gene))
Rosenbluh2017CRISPRkoSim = list(log2fc = Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category != "control")], geneIds = Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene, negCtrl = Rosenbluh2017CRISPRko.sim.DESeq.log2fc[which(Rosenbluh2017CRISPRko.sim$Category == "control")], counts = Rosenbluh2017CRISPRko.sim[ ,c(2:4, 9:11)])
Rosenbluh2017CRISPRkoSim$counts = Rosenbluh2017CRISPRkoSim$counts[c(which(Rosenbluh2017CRISPRkoSim$counts$Category == "exon"), which(Rosenbluh2017CRISPRkoSim$counts$Category == "sim"), which(Rosenbluh2017CRISPRkoSim$counts$Category == "control")), ]
gene.counts = table(Rosenbluh2017CRISPRkoSim$geneIds)
gene.counts
Rosenbluh2017CRISPRkoSim.essential
i = 1
downsampled.gene.counts = rep(5, times = length(gene.counts)) + sapply(gene.counts, function(x) round((i - 1)*(x - 5)/7))
percent.downsampled = sum(downsampled.gene.counts)/sum(gene.counts)
Rosenbluh2017CRISPRkoSim.downsampledIndexes =
unlist(sapply(names(downsampled.gene.counts),
function(g) sample(which(Rosenbluh2017CRISPRko.sim.DESeq.log2fc.gene == g), size = downsampled.gene.counts[g], replace = FALSE)))
percent.downsampled = sum(downsampled.gene.counts)/sum(gene.counts)
Rosenbluh2017CRISPRkoSim.downsampled = list(log2fc = Rosenbluh2017CRISPRkoSim$log2fc[as.vector(Rosenbluh2017CRISPRkoSim.downsampledIndexes)],
counts = Rosenbluh2017CRISPRkoSim$counts[as.vector(Rosenbluh2017CRISPRkoSim.downsampledIndexes), ],
geneIds = Rosenbluh2017CRISPRkoSim$geneIds[as.vector(Rosenbluh2017CRISPRkoSim.downsampledIndexes)])
unique(Rosenbluh2017CRISPRkoSim.downsampled$geneIds)
ls()
sqrt(1.25^2 + 0.75^2)
sqrt(1.5^2 + 0.75^2)
sqrt(1.5^2 + 0.5^2)
InSilicoSCABCForeGroundMatrix = read.table(file = "~/Documents/InSilico/InSilicoSCABCForeGroundMatrix.txt", header = TRUE)
InSilicoClusterAssignments = read.table(file = "~/K562vsHL60scATACandRNAseq/SRX&Type&Batch.txt",header = TRUE)
InSilicoClusterAssignments = read.table(file = "~/scRNAseqAnalysis/K562vsHL60scATACandRNAseq/SRX&Type&Batch.txt",header = TRUE)
InSilicoSCABCForeGroundMatrix = read.table(file = "InSilicoSCABCForeGroundMatrix.txt", header = TRUE)
InSilicoSCABCPeaks = read.table(file = "InSilicoSCABCPeaks.bed", header = TRUE)
InSilicoSCABCForeGroundMatrix = read.table(file = "~/scRNAseqAnalysis/scATAC-RNAseq/scABC/vignettes/InSilicoSCABCForeGroundMatrix.txt", header = TRUE)
InSilicoSCABCPeaks = read.table(file = "~/scRNAseqAnalysis/scATAC-RNAseq/scABC/vignettes/InSilicoSCABCPeaks.bed", header = TRUE) # same order as rows in InSilicoSCABCForeGroundMatrix
InSilicoClusterAssignments = read.table(file = "~/scRNAseqAnalysis/K562vsHL60scATACandRNAseq/SRX&Type&Batch.txt",header = TRUE)
head(InSilicoClusterAssignments)
head(colnames(InSilicoSCABCForeGroundMatrix))
library(scABC)
InSilicoSCABCForeGroundMatrix = read.table(file = "~/scRNAseqAnalysis/scATAC-RNAseq/scABC/vignettes/InSilicoSCABCForeGroundMatrix.txt", header = TRUE)
InSilicoSCABCPeaks = read.table(file = "~/scRNAseqAnalysis/scATAC-RNAseq/scABC/vignettes/InSilicoSCABCPeaks.bed", header = TRUE) # same order as rows in InSilicoSCABCForeGroundMatrix
InSilicoSCABCForeGroundMatrixPeaksFiltered = filterPeaks(InSilicoSCABCForeGroundMatrix, InSilicoSCABCPeaks, nreads_thresh = 2, ncells_thresh = 10)\
InSilicoSCABCForeGroundMatrixPeaksFiltered = filterPeaks(InSilicoSCABCForeGroundMatrix, InSilicoSCABCPeaks, nreads_thresh = 2, ncells_thresh = 10)
dim(InSilicoSCABCForeGroundMatrixPeaksFiltered$ForeGroundMatrix)
dim(InSilicoSCABCForeGroundMatrixPeaksFiltered$peaks)
InSilicoSCABCForeGroundMatrixSamplesFiltered = filterSamples(ForeGround = InSilicoSCABCForeGroundMatrixPeaksFiltered$ForeGroundMatrix, BackGround = matrix(nrow = dim(InSilicoSCABCForeGroundMatrixPeaksFiltered$ForeGroundMatrix)[1], ncol = dim(InSilicoSCABCForeGroundMatrixPeaksFiltered$ForeGroundMatrix)[2]), readsFGthresh = 1000)
dim(InSilicoSCABCForeGroundMatrixSamplesFiltered$ForeGroundMatrix)
dim(InSilicoSCABCForeGroundMatrixSamplesFiltered$BackGroundMatrix)
InSilicoSCABCForeGroundMatrix = InSilicoSCABCForeGroundMatrixSamplesFiltered$ForeGroundMatrix
InSilicoSCABCPeaks = InSilicoSCABCForeGroundMatrixPeaksFiltered$peaks
weights = apply(InSilicoSCABCForeGroundMatrix, 2, mean)
InSilicoSCABCLandmarksWithoutBam = computeLandmarks(InSilicoSCABCForeGroundMatrix, weights = weights, nCluster = 6, nTop = 5000)
cor(InSilicoSCABCLandmarksWithoutBam, InSilicoSCABCLandmarksWithoutBam, method = 'spearman')
InSilicoClusterAssignments = read.table(file = "~/scRNAseqAnalysis/K562vsHL60scATACandRNAseq/SRX&Type&Batch.txt")
InSilicoClusterAssignments = InSilicoClusterAssignments[match(colnames(InSilicoSCABCForeGroundMatrix),InSilicoClusterAssignments[,1]),]
dim(InSilicoClusterAssignments)
head(InSilicoClusterAssignments)
head(colnames(InSilicoSCABCForeGroundMatrix))
head(match(colnames(InSilicoSCABCForeGroundMatrix),InSilicoClusterAssignments[,1]))
?match
head(InSilicoClusterAssignments[,1])
InSilicoClusterAssignments = read.table(file = "~/scRNAseqAnalysis/K562vsHL60scATACandRNAseq/SRX&Type&Batch.txt")
head(InSilicoClusterAssignments[,1])
head(match(colnames(InSilicoSCABCForeGroundMatrix), sapply(InSilicoClusterAssignments[,1], toString)))
c("SRX859035" %in% colnames(InSilicoSCABCForeGroundMatrix))
head(match(colnames(InSilicoSCABCForeGroundMatrix), paste0(InSilicoClusterAssignments[,1], ".bam")))
InSilicoClusterAssignments = InSilicoClusterAssignments[match(colnames(InSilicoSCABCForeGroundMatrix), paste0(InSilicoClusterAssignments[,1], ".bam")),]
InSilicoLandMarkAssignmentsWithoutBam = assign2landmarks(InSilicoSCABCForeGroundMatrix, InSilicoSCABCLandmarksWithoutBam)
pander::pander(table(InSilicoLandMarkAssignmentsWithoutBam, InSilicoClusterAssignments[,2]))
?dgamma
dpois(1, lambda = 1)
dpois(1, lambda = 2)
dpois(1, lambda = exp(1))
dpois(1, lambda = log(2))
dpois(1, lambda = log(1/2))
1000*exp(1)
?gamma
gamma(2)
gamma(1)
gamma(3)
?dgamma
?nbinom
?pnbinom
pnbinom(1, size = 1, prob = 1/2)
dnbinom(1, size = 1, prob = 1/2)
dnbinom(2, size = 1, prob = 1/2)
dnbinom(0, size = 1, prob = 1/2)
1000*exp(1)
10000*exp(1)
100000*exp(1)
1000000*exp(1)
2718*1*exp(-1)
1000*log(2)*exp(-log(2))
1000*exp(log(2))
1000*exp(-log(2))
2000*ppois(1, log(2))
2000*ppois(1, log(1))
2000*ppois(2, log(2))
2000*dpois(1, log(2))
2000*dpois(1, log(3))
2000*dpois(1, log(2))
setwd("~/sgRNA/tiling/metaAnalysis/")
library(Rsamtools)
library(GenomicFeatures)
library(biomaRt)
library(GenomicRanges)
library(Repitools)
library(Rsamtools)
library(GenomicFeatures)
library(biomaRt)
library(GenomicRanges)
library(Repitools)
library(chromstaR)
library(BSgenome.Mmusculus.UCSC.mm10)
bamfile = "~/sgRNA/tiling/metaAnalysis/YanxiaSeqsWithPAM.uniq.sort.bam"
bam = scanBam(bamfile)
bam_field = names(bam[[1]])
table(bam[[1]]$flag)
unlist <- function (x){
## do.call(c, ...) coerces factor to integer, which is undesired
x1 <- x[[1L]]
if (is.factor(x1)){
structure(unlist(x), class = "factor", levels = levels(x1))
} else {
do.call(c, x)
}
}
full_list = lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
full_list = lapply(bam_field, function(y) .unlist(lapply(bam, "[", y)))
.unlist <- function (x){
## do.call(c, ...) coerces factor to integer, which is undesired
x1 <- x[[1L]]
if (is.factor(x1)){
structure(unlist(x), class = "factor", levels = levels(x1))
} else {
do.call(c, x)
}
}
full_list = lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
